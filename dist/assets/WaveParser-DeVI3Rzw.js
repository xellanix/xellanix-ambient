import{f as d,S as h,m as F,k as r,d as S,s as c,B as I,c as w,E as A,F as g,o as T}from"./index-D0b3a_35.js";import{I as p}from"./ID3v2Parser-D4kMq28D.js";const k={len:8,get:(i,e)=>({chunkID:new h(4,"latin1").get(i,e),chunkSize:d.get(i,e+4)})};class z{constructor(e){this.tagHeader=e,this.len=e.chunkSize,this.len+=this.len&1}get(e,t){return new h(this.tagHeader.chunkSize,"ascii").get(e,t)}}class l extends F("Wave"){}const s={PCM:1,ADPCM:2,IEEE_FLOAT:3,MPEG_ADTS_AAC:5632,MPEG_LOAS:5634,RAW_AAC1:255,DOLBY_AC3_SPDIF:146,DVM:8192,RAW_SPORT:576,ESST_AC3:577,DRM:9,DTS2:8193,MPEG:80},D={[s.PCM]:"PCM",[s.ADPCM]:"ADPCM",[s.IEEE_FLOAT]:"IEEE_FLOAT",[s.MPEG_ADTS_AAC]:"MPEG_ADTS_AAC",[s.MPEG_LOAS]:"MPEG_LOAS",[s.RAW_AAC1]:"RAW_AAC1",[s.DOLBY_AC3_SPDIF]:"DOLBY_AC3_SPDIF",[s.DVM]:"DVM",[s.RAW_SPORT]:"RAW_SPORT",[s.ESST_AC3]:"ESST_AC3",[s.DRM]:"DRM",[s.DTS2]:"DTS2",[s.MPEG]:"MPEG"};class f{constructor(e){if(e.chunkSize<16)throw new l("Invalid chunk size");this.len=e.chunkSize}get(e,t){return{wFormatTag:r.get(e,t),nChannels:r.get(e,t+2),nSamplesPerSec:d.get(e,t+4),nAvgBytesPerSec:d.get(e,t+8),nBlockAlign:r.get(e,t+12),wBitsPerSample:r.get(e,t+14)}}}class R{constructor(e){if(e.chunkSize<4)throw new l("Invalid fact chunk size.");this.len=e.chunkSize}get(e,t){return{dwSampleLength:d.get(e,t)}}}const u={len:420,get:(i,e)=>({description:c(new h(256,"ascii").get(i,e)).trim(),originator:c(new h(32,"ascii").get(i,e+256)).trim(),originatorReference:c(new h(32,"ascii").get(i,e+288)).trim(),originationDate:c(new h(10,"ascii").get(i,e+320)).trim(),originationTime:c(new h(8,"ascii").get(i,e+330)).trim(),timeReferenceLow:d.get(i,e+338),timeReferenceHigh:d.get(i,e+342),version:r.get(i,e+346),umid:new S(64).get(i,e+348),loudnessValue:r.get(i,e+412),maxTruePeakLevel:r.get(i,e+414),maxMomentaryLoudness:r.get(i,e+416),maxShortTermLoudness:r.get(i,e+418)})},o=w("music-metadata:parser:RIFF");class x extends I{constructor(){super(...arguments),this.blockAlign=0}async parse(){const e=await this.tokenizer.readToken(k);if(o(`pos=${this.tokenizer.position}, parse: chunkID=${e.chunkID}`),e.chunkID==="RIFF")return this.parseRiffChunk(e.chunkSize).catch(t=>{if(!(t instanceof A))throw t})}async parseRiffChunk(e){const t=await this.tokenizer.readToken(g);switch(this.metadata.setFormat("container",t),t){case"WAVE":return this.readWaveChunk(e-g.len);default:throw new l(`Unsupported RIFF format: RIFF/${t}`)}}async readWaveChunk(e){for(;e>=k.len;){const t=await this.tokenizer.readToken(k);switch(e-=k.len+t.chunkSize,t.chunkSize>e&&this.metadata.addWarning("Data chunk size exceeds file size"),this.header=t,o(`pos=${this.tokenizer.position}, readChunk: chunkID=RIFF/WAVE/${t.chunkID}`),t.chunkID){case"LIST":await this.parseListTag(t);break;case"fact":this.metadata.setFormat("lossless",!1),this.fact=await this.tokenizer.readToken(new R(t));break;case"fmt ":{const a=await this.tokenizer.readToken(new f(t));let n=D[a.wFormatTag];n||(o(`WAVE/non-PCM format=${a.wFormatTag}`),n=`non-PCM (${a.wFormatTag})`),this.metadata.setFormat("codec",n),this.metadata.setFormat("bitsPerSample",a.wBitsPerSample),this.metadata.setFormat("sampleRate",a.nSamplesPerSec),this.metadata.setFormat("numberOfChannels",a.nChannels),this.metadata.setFormat("bitrate",a.nBlockAlign*a.nSamplesPerSec*8),this.blockAlign=a.nBlockAlign;break}case"id3 ":case"ID3 ":{const a=await this.tokenizer.readToken(new S(t.chunkSize)),n=T(a);await new p().parse(this.metadata,n,this.options);break}case"data":{this.metadata.format.lossless!==!1&&this.metadata.setFormat("lossless",!0);let a=t.chunkSize;if(this.tokenizer.fileInfo.size){const m=this.tokenizer.fileInfo.size-this.tokenizer.position;m<a&&(this.metadata.addWarning("data chunk length exceeding file length"),a=m)}const n=this.fact?this.fact.dwSampleLength:a===4294967295?void 0:a/this.blockAlign;n&&(this.metadata.setFormat("numberOfSamples",n),this.metadata.format.sampleRate&&this.metadata.setFormat("duration",n/this.metadata.format.sampleRate)),this.metadata.format.codec==="ADPCM"?this.metadata.setFormat("bitrate",352e3):this.metadata.format.sampleRate&&this.metadata.setFormat("bitrate",this.blockAlign*this.metadata.format.sampleRate*8),await this.tokenizer.ignore(t.chunkSize);break}case"bext":{const a=await this.tokenizer.readToken(u);Object.keys(a).forEach(m=>{this.metadata.addTag("exif",`bext.${m}`,a[m])});const n=t.chunkSize-u.len;await this.tokenizer.ignore(n);break}case"\0\0\0\0":o(`Ignore padding chunk: RIFF/${t.chunkID} of ${t.chunkSize} bytes`),this.metadata.addWarning(`Ignore chunk: RIFF/${t.chunkID}`),await this.tokenizer.ignore(t.chunkSize);break;default:o(`Ignore chunk: RIFF/${t.chunkID} of ${t.chunkSize} bytes`),this.metadata.addWarning(`Ignore chunk: RIFF/${t.chunkID}`),await this.tokenizer.ignore(t.chunkSize)}this.header.chunkSize%2===1&&(o("Read odd padding byte"),await this.tokenizer.ignore(1))}}async parseListTag(e){const t=await this.tokenizer.readToken(new h(4,"latin1"));switch(o("pos=%s, parseListTag: chunkID=RIFF/WAVE/LIST/%s",this.tokenizer.position,t),t){case"INFO":return this.parseRiffInfoTags(e.chunkSize-4);default:return this.metadata.addWarning(`Ignore chunk: RIFF/WAVE/LIST/${t}`),o(`Ignoring chunkID=RIFF/WAVE/LIST/${t}`),this.tokenizer.ignore(e.chunkSize-4).then()}}async parseRiffInfoTags(e){for(;e>=8;){const t=await this.tokenizer.readToken(k),a=new z(t),n=await this.tokenizer.readToken(a);this.addTag(t.chunkID,c(n)),e-=8+a.len}if(e!==0)throw new l(`Illegal remaining size: ${e}`)}addTag(e,t){this.metadata.addTag("exif",e,t)}}export{x as WaveParser};
